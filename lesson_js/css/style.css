@charset "UTF-8";
*,
*::before,
*::after {
  padding: 0;
  margin: 0;
  border: none;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

*::before,
*::after {
  display: inline-block;
}

a {
  text-decoration: none;
  display: inline-block;
  color: inherit;
}

li {
  list-style: none;
}

img {
  max-width: 100%;
  vertical-align: middle;
}

html,
body {
  line-height: 1;
  height: 100%;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: inherit;
  font-size: inherit;
}

/* FORM */
input,
button,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  color: inherit;
  background-color: transparent;
}

input,
textarea {
  width: 100%;
}

button,
select,
option {
  cursor: pointer;
}

input[type=text],
input[type=email],
input[type=tel],
textarea {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

label {
  display: block;
}

body {
  font-family: "Poppins", sans-serif;
  color: rgb(242, 247, 238);
  background-color: #2b213d;
}

[class*=__container] {
  max-width: 87.5rem;
  margin: 0 auto;
  padding-left: 0.9375rem;
  padding-right: 0.9375rem;
}

.page {
  padding: 2rem;
}

.button {
  padding: 0.9375rem;
  background-color: #72f73d;
  text-transform: uppercase;
  color: #2b213d;
  font-weight: 600;
  border-radius: 0.5rem;
  letter-spacing: 1.5px;
  -webkit-transition: background-color 0.3s;
  transition: background-color 0.3s;
}

html .active.button {
  background-color: #f18241;
}

.button:hover {
  background-color: #03ce14;
}

.parent-block {
  width: 300px;
  height: 300px;
  opacity: 0;
  -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;
  transition: opacity 0.3s, -webkit-transform 0.3s;
  transition: transform 0.3s, opacity 0.3s;
  transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;
  -webkit-transform: rotate(-50deg);
      -ms-transform: rotate(-50deg);
          transform: rotate(-50deg);
}

.parent-block.animate {
  opacity: 1;
  -webkit-transform: rotate(0deg);
      -ms-transform: rotate(0deg);
          transform: rotate(0deg);
}

.block {
  width: 300px;
  height: 300px;
  background-color: #03ce14;
}

/* завдання 2*/
body {
  opacity: 0;
  -webkit-transition: opacity 2s;
  transition: opacity 2s;
}

body.loaded {
  opacity: 1;
}

/* завдання 3*/
header, main, footer {
  padding: 20px;
}

header {
  background-color: rgb(186, 243, 30);
}

footer {
  background-color: rgb(128, 3, 128);
  -webkit-transition: background-color 0.3s ease;
  transition: background-color 0.3s ease;
}

/*
задача 1
'''js
const items = document.querySelectorAll('.item');

items.forEach(item => {
    item.addEventListener('click', () => {
        item.classList.toggle('active');
    });
});
```
задача 2
```css
body {
  opacity: 0;
  transition: opacity 2s; 
}

body.loaded {
  opacity: 1;
}
```
```js
window.addEventListener('load', () => {
    document.body.classList.add('loaded');
});
  ```
задача 3
```css
header, main, footer {
  padding: 20px;
}

header {
  background-color: rgb(186, 243, 30)
}

footer {
  background-color: rgb(128, 3, 128);
  transition: background-color 0.3s ease;
}
```
```js
const header = document.querySelector('header');
const footer = document.querySelector('footer');

header.addEventListener('mouseenter', () => {
  footer.style.backgroundColor = 'yellow'; 
});

header.addEventListener('mouseleave', () => {
  footer.style.backgroundColor = 'purple';
});
```

задача 4
```js
const options = {
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: 1,
  };

  const callback = (entries, observer) => {
    entries.forEach(entry => {
      const currentElement = entry.target;
      if (entry.isIntersecting) {
        observer.unobserve(currentElement); 

        let i = 0;
        const timer = setInterval(() => {
          intervalFunction(i, currentElement);
          i++;
          if (i >= count) {
            clearInterval(timer);
          }
        }, delay);
      }
    });
  };

  const myItem = document.querySelector('.item');
  const count = +myItem.dataset.count || 5;
  const delay = +myItem.dataset.delay || 1000;

  const observer = new IntersectionObserver(callback, options);
  observer.observe(myItem);

  function intervalFunction(i, elem) {
    elem.textContent = `${i}`;
  }
```
*/